# =============================================================================
# Unified DNS Manager Container for Unraid
# Combines API service and CoreDNS in a single container using supervisord
# =============================================================================

# Build stage for Go API
FROM golang:1.24.3-alpine AS builder

# Install build dependencies
RUN apk add --no-cache git

# Set working directory
WORKDIR /app

# Copy go mod files
COPY go.mod go.sum ./

# Download dependencies
RUN go mod download

# Copy source code
COPY . .

# Build the application
RUN CGO_ENABLED=0 GOOS=linux go build -o /app/bin/api ./cmd/api

# =============================================================================
# Final stage - Unified runtime container
# =============================================================================
FROM alpine:3.19

# Install runtime dependencies including supervisord
RUN apk add --no-cache \
    supervisor \
    ca-certificates \
    tzdata \
    iptables \
    ipset \
    python3 \
    curl \
    wget \
    bash

# Set working directory
WORKDIR /app

# Copy API binary from builder
COPY --from=builder /app/bin/api /app/api

# Install CoreDNS
RUN wget -q https://github.com/coredns/coredns/releases/download/v1.11.1/coredns_1.11.1_linux_amd64.tgz \
    && tar -xzf coredns_1.11.1_linux_amd64.tgz \
    && mv coredns /usr/local/bin/ \
    && rm coredns_1.11.1_linux_amd64.tgz \
    && chmod +x /usr/local/bin/coredns

# Copy configuration templates and scripts to internal locations
RUN mkdir -p /app/templates /app/scripts
COPY configs/config.yaml.template /app/templates/
COPY configs/coredns/ /app/templates/coredns/
COPY scripts/template_substitute.py /app/scripts/
COPY scripts/configure_ns.py /app/scripts/

# Create necessary directories and set permissions (including volume mount points)
RUN mkdir -p /etc/coredns/zones /etc/coredns /app/data /app/configs /var/log/supervisor /etc/letsencrypt && \
    chmod -R 755 /etc/coredns /app/data /app/configs && \
    chmod +x /app/api /app/scripts/*.py

# Create supervisord configuration
RUN cat > /etc/supervisord.conf << 'EOF'
[supervisord]
nodaemon=true
user=root
logfile=/var/log/supervisor/supervisord.log
pidfile=/var/run/supervisord.pid
childlogdir=/var/log/supervisor

[unix_http_server]
file=/var/run/supervisor.sock
chmod=0700

[supervisorctl]
serverurl=unix:///var/run/supervisor.sock

[rpcinterface:supervisor]
supervisor.rpcinterface_factory = supervisor.rpcinterface:make_main_rpcinterface

[program:dns-api]
command=/app/api
directory=/app
autostart=true
autorestart=true
startretries=3
redirect_stderr=true
stdout_logfile=/dev/stdout
stdout_logfile_maxbytes=0
environment=GIN_MODE=release,DNS_RESOLVERS="8.8.8.8:53,1.1.1.1:53",LEGO_DISABLE_CNAME_SUPPORT=false,LEGO_DNS_TIMEOUT=10s

[program:coredns]
command=/app/start-coredns.sh
directory=/etc/coredns
autostart=true
autorestart=true
startretries=3
redirect_stderr=true
stdout_logfile=/dev/stdout
stdout_logfile_maxbytes=0
startsecs=10
EOF

# Create initialization script
RUN cat > /app/init.sh << 'EOF'
#!/bin/bash
set -e

# Colors for output
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
NC='\033[0m'

log() { echo -e "${GREEN}[INIT]${NC} $1"; }
warn() { echo -e "${YELLOW}[WARN]${NC} $1"; }
error() { echo -e "${RED}[ERROR]${NC} $1"; }

log "Starting DNS Manager initialization..."

# Debug: List what files are actually present
log "Debug: Files in /app/configs/ (mounted volume):"
ls -la /app/configs/ || true
log "Debug: Files in /app/templates/ (built-in):"
ls -la /app/templates/ || true
log "Debug: Files in /app/scripts/:"
ls -la /app/scripts/ || true

# Check if config.yaml exists, if not create from template
if [ ! -f "/app/configs/config.yaml" ]; then
    log "Creating configuration from template and environment variables..."

        if [ ! -f "/app/templates/config.yaml.template" ]; then
        error "Template file not found!"
        error "Contents of /app/templates/:"
        ls -la /app/templates/ || true
        exit 1
    fi

    # Copy template to config (from internal templates to mounted volume)
    cp /app/templates/config.yaml.template /app/configs/config.yaml

    # Substitute environment variables using Python
    if [ -n "$INTERNAL_DOMAIN" ]; then
        python3 /app/scripts/template_substitute.py /app/configs/config.yaml /app/configs/config.yaml \
            -s "INTERNAL_DOMAIN_PLACEHOLDER" "$INTERNAL_DOMAIN"
    fi

    if [ -n "$LETSENCRYPT_EMAIL" ]; then
        python3 /app/scripts/template_substitute.py /app/configs/config.yaml /app/configs/config.yaml \
            -s "LETSENCRYPT_EMAIL_PLACEHOLDER" "$LETSENCRYPT_EMAIL"
    fi

    if [ -n "$TAILSCALE_API_KEY" ]; then
        python3 /app/scripts/template_substitute.py /app/configs/config.yaml /app/configs/config.yaml \
            -s "TAILSCALE_API_KEY_PLACEHOLDER" "$TAILSCALE_API_KEY"
    fi

    if [ -n "$TAILSCALE_TAILNET" ]; then
        python3 /app/scripts/template_substitute.py /app/configs/config.yaml /app/configs/config.yaml \
            -s "TAILSCALE_TAILNET_PLACEHOLDER" "$TAILSCALE_TAILNET"
    fi

    # Set Let's Encrypt URL based on environment
    LETSENCRYPT_URL="${LETSENCRYPT_URL:-https://acme-v02.api.letsencrypt.org/directory}"
    python3 /app/scripts/template_substitute.py /app/configs/config.yaml /app/configs/config.yaml \
        -s "LETSENCRYPT_URL_PLACEHOLDER" "$LETSENCRYPT_URL"

    # Configure TLS if enabled
    if [ "$ENABLE_TLS" = "true" ]; then
        python3 /app/scripts/template_substitute.py /app/configs/config.yaml /app/configs/config.yaml \
            -s "enabled: false" "enabled: true"
    fi

    # Configure DNS provider if specified
    if [ "$CERTIFICATE_DNS_PROVIDER" = "cloudflare" ] && [ -n "$CLOUDFLARE_API_TOKEN" ]; then
        python3 /app/scripts/template_substitute.py /app/configs/config.yaml /app/configs/config.yaml \
            -s "provider: \"lego\"" "provider: \"lego\"
  dns_provider: cloudflare
  cloudflare_api_token: \"$CLOUDFLARE_API_TOKEN\""
    fi

    log "Configuration created successfully"
else
    log "Using existing configuration file"
fi

# Try to auto-configure Tailscale device name if not set and Python/API are available
if [ -z "$TAILSCALE_DEVICE_NAME" ]; then
    log "Attempting to auto-detect Tailscale device..."
    if command -v python3 >/dev/null 2>&1; then
        python3 /app/scripts/configure_ns.py || warn "Auto-detection failed, will use manual configuration"
    else
        warn "Python3 not available for auto-detection"
    fi
elif [ -n "$TAILSCALE_DEVICE_NAME" ]; then
    # Update config with provided device name
    python3 /app/scripts/template_substitute.py /app/configs/config.yaml /app/configs/config.yaml \
        -s "# device_name: \"your-device-name\"" "device_name: \"$TAILSCALE_DEVICE_NAME\""
fi

# Copy CoreDNS template to mounted config location if it doesn't exist
if [ ! -f "/etc/coredns/Corefile.template" ]; then
    log "Copying CoreDNS template to mounted location..."
    mkdir -p /etc/coredns
    cp /app/templates/coredns/Corefile.template /etc/coredns/
fi

# Ensure CoreDNS template exists
if [ ! -f "/etc/coredns/Corefile.template" ]; then
    error "CoreDNS template not found!"
    exit 1
fi

log "Initialization complete, starting services..."
EOF

RUN chmod +x /app/init.sh

# Create CoreDNS startup wrapper script
RUN cat > /app/start-coredns.sh << 'EOF'
#!/bin/bash
set -e

GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m'

log() { echo -e "${GREEN}[COREDNS]${NC} $1"; }
warn() { echo -e "${YELLOW}[COREDNS]${NC} $1"; }

log "Waiting for CoreDNS configuration to be ready..."

# Wait for Corefile to exist
MAX_WAIT=60
WAIT_COUNT=0
while [ ! -f "/etc/coredns/Corefile" ] && [ $WAIT_COUNT -lt $MAX_WAIT ]; do
    warn "Corefile not found, waiting... ($WAIT_COUNT/$MAX_WAIT)"
    sleep 2
    WAIT_COUNT=$((WAIT_COUNT + 1))
done

if [ ! -f "/etc/coredns/Corefile" ]; then
    echo "ERROR: Corefile not found after $MAX_WAIT attempts"
    exit 1
fi

log "Corefile found, starting CoreDNS..."
exec /usr/local/bin/coredns -conf /etc/coredns/Corefile
EOF

RUN chmod +x /app/start-coredns.sh

# Set environment variables for better DNS propagation checking in containers
ENV DNS_RESOLVERS="8.8.8.8:53,1.1.1.1:53"
ENV LEGO_DISABLE_CNAME_SUPPORT=false
ENV LEGO_DNS_TIMEOUT=10s
ENV GIN_MODE=release

# Expose all required ports
EXPOSE 8080 8443 53/udp 53/tcp 853

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=40s --retries=3 \
    CMD curl -f http://localhost:8080/health || exit 1

# Entry point: run initialization then start supervisord
CMD ["/bin/bash", "-c", "/app/init.sh && exec /usr/bin/supervisord -c /etc/supervisord.conf"]
