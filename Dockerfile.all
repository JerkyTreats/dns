# =============================================================================
# Unified DNS Manager Container for Unraid
# Combines API service and CoreDNS in a single container using supervisord
# =============================================================================

# Build stage for Go API
FROM golang:1.24.3-alpine AS builder

# Install build dependencies
RUN apk add --no-cache git

# Set working directory
WORKDIR /app

# Copy go mod files
COPY go.mod go.sum ./

# Download dependencies
RUN go mod download

# Copy source code
COPY . .

# Build the application
RUN CGO_ENABLED=0 GOOS=linux go build -o /app/bin/api ./cmd/api

# =============================================================================
# Final stage - Unified runtime container
# =============================================================================
FROM alpine:3.19

# Install runtime dependencies including supervisord
RUN apk add --no-cache \
    supervisor \
    ca-certificates \
    tzdata \
    iptables \
    ipset \
    python3 \
    curl \
    wget \
    bash

# Set working directory
WORKDIR /app

# Copy API binary from builder
COPY --from=builder /app/bin/api /app/api

# Copy documentation files for Swagger UI
COPY --from=builder /app/docs ./docs

# Install CoreDNS
RUN wget -q https://github.com/coredns/coredns/releases/download/v1.11.1/coredns_1.11.1_linux_amd64.tgz \
    && tar -xzf coredns_1.11.1_linux_amd64.tgz \
    && mv coredns /usr/local/bin/ \
    && rm coredns_1.11.1_linux_amd64.tgz \
    && chmod +x /usr/local/bin/coredns

# Install Caddy for reverse proxy functionality
RUN wget -q https://github.com/caddyserver/caddy/releases/download/v2.7.6/caddy_2.7.6_linux_amd64.tar.gz \
    && tar -xzf caddy_2.7.6_linux_amd64.tar.gz \
    && mv caddy /usr/local/bin/ \
    && rm caddy_2.7.6_linux_amd64.tar.gz \
    && chmod +x /usr/local/bin/caddy

# Copy configuration templates and scripts to internal locations
RUN mkdir -p /app/templates /app/scripts /etc/caddy
COPY configs/config.yaml.template /app/templates/
COPY configs/coredns/ /app/templates/coredns/
COPY configs/Caddyfile.template /app/templates/
COPY configs/Caddyfile.template /etc/caddy/
COPY scripts/template_substitute.py /app/scripts/
COPY scripts/configure_ns.py /app/scripts/
COPY scripts/supervisord.conf /etc/supervisord.conf
COPY scripts/init.sh /app/init.sh
COPY scripts/start-coredns.sh /app/start-coredns.sh

# Create necessary directories and set permissions (including volume mount points)
RUN mkdir -p /etc/coredns/zones /etc/coredns /app/data /app/configs /var/log/supervisor /etc/letsencrypt && \
    chmod -R 755 /etc/coredns /app/data /app/configs && \
    chmod +x /app/api /app/init.sh /app/start-coredns.sh /app/scripts/*.py

# Set environment variables for better DNS propagation checking in containers
ENV DNS_RESOLVERS="8.8.8.8:53,1.1.1.1:53"
ENV LEGO_DISABLE_CNAME_SUPPORT=false
ENV LEGO_DNS_TIMEOUT=10s
ENV GIN_MODE=release
ENV COREDNS_HEALTH_PORT=8082

# Expose all required ports
EXPOSE 8080 8443 53/udp 53/tcp 853 8082 80 2019

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=40s --retries=3 \
    CMD curl -f http://localhost:8080/health || exit 1

# Entry point: run initialization then start supervisord
CMD ["/bin/bash", "-c", "/app/init.sh && exec /usr/bin/supervisord -c /etc/supervisord.conf"]
